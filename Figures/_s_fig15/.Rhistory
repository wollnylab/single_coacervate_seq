inner_join(.,dhh1_input_tpm, by="target_id") %>% distinct() %>%
arrange(desc(count)) %>%
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
dhh1_bens_plot_model <- gam(percent ~ s(dhh1_input_tpm, bs = "cs"), data = dhh1_bens_plot)
dhh1_bens_plot <- dhh1_bens_plot %>% mutate(residuals = dhh1_bens_plot_model$residuals) %>% mutate(droplet_type = "dhh1")
dhh1_bens_plot_plot <- dhh1_bens_plot %>%
ggplot(aes(x = dhh1_input_tpm, y = percent)) +
geom_point(size = 3, pch = 21) +
geom_point(data = dhh1_bens_plot %>% filter(residuals > 30), color = "indianred4", size = 4, alpha = 0.4) +
stat_smooth(col = "red") +
labs(x = "Input mRNA amount\nlog2(TPM)", y = "Detected in x\ncoacervates [%]", title = "Dhh1")
######################################
# ---- DATA FROM LYS COACERVATES --- #
######################################
ool12_input_tpm <- master %>%
filter(experiment == "ool12_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(ool12_input_tpm = log2_tpm)
ool12_bens_plot <- master_lys_plus %>%
filter(tpm != 0) %>%
filter(experiment == "ool12") %>%
filter(rel_coverage >= 0.2) %>%
group_by(target_id) %>%
summarise(ave_tpm = mean(log2_tpm), count = n()) %>%
inner_join(.,ool12_input_tpm, by="target_id") %>% distinct() %>%
arrange(desc(count)) %>%
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
ool12_bens_plot_model <- gam(percent ~ s(ool12_input_tpm, bs = "cs"), data = ool12_bens_plot)
ool12_bens_plot <- ool12_bens_plot %>% mutate(residuals = ool12_bens_plot_model$residuals) %>% mutate(droplet_type = "lys")
ool12_bens_plot_plot <- ool12_bens_plot %>%
ggplot(aes(x = ool12_input_tpm, y = percent)) +
geom_point(size = 3, pch = 21) +
geom_point(data = ool12_bens_plot %>% filter(residuals > 30), color = "indianred4", size = 4, alpha = 0.4) +
stat_smooth(col = "red") +
labs(x = "Input mRNA amount\nlog2(TPM)", y = "Detected in x\ncoacervates [%]", title = "LYS")
#######################################
# ---- DATA FROM PDDA COACERVATES --- #
#######################################
# --- OOL17 replicate ------------------
ool17_input_tpm <- master %>%
filter(experiment == "ool17_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(ool17_input_tpm = log2_tpm)
ool17_bens_plot <- master %>%
filter(tpm != 0) %>%
filter(experiment == "ool17") %>%
group_by(target_id) %>%
summarise(count = n()) %>%
left_join(ool17_input_tpm, ., by="target_id") %>%
mutate(count = replace(count, which(is.na(count)), 0)) %>% # include all transcripts that are found in 0 coac
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
ool17_bens_plot_model <- gam(percent ~ s(ool17_input_tpm, bs = "cs"), data = ool17_bens_plot)
ool17_bens_plot <- ool17_bens_plot %>% mutate(residuals = ool17_bens_plot_model$residuals) %>% mutate(droplet_type = "pdda_1")
ool17_bens_plot_plot <- ool17_bens_plot %>%
ggplot(aes(x = ool17_input_tpm, y = percent)) +
geom_point(size = 3, pch = 21) +
geom_point(data = ool17_bens_plot %>% filter(residuals > 30), color = "indianred4", size = 4, alpha = 0.4) +
stat_smooth(col = "red") +
labs(x = "Input mRNA amount\nlog2(TPM)", y = "Detected in x\ncoacervates [%]", title = "PDDA_1")
# --- OOL18 replicate ------------------
ool18_input_tpm <- master %>%
filter(experiment == "ool18_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(ool18_input_tpm = log2_tpm)
ool18_bens_plot <- master %>%
filter(tpm != 0) %>%
filter(experiment == "ool18") %>%
group_by(target_id) %>%
summarise(count = n()) %>%
left_join(ool18_input_tpm, ., by="target_id") %>%
mutate(count = replace(count, which(is.na(count)), 0)) %>% # include all transcripts that are found in 0 coac
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
ool18_bens_plot_model <- gam(percent ~ s(ool18_input_tpm, bs = "cs"), data = ool18_bens_plot)
ool18_bens_plot <- ool18_bens_plot %>% mutate(residuals = ool18_bens_plot_model$residuals) %>% mutate(droplet_type = "pdda_2")
ool18_bens_plot_plot <- ool18_bens_plot %>%
ggplot(aes(x = ool18_input_tpm, y = percent)) +
geom_point(size = 3, pch = 21) +
geom_point(data = ool18_bens_plot %>% filter(residuals > 30), color = "indianred4", size = 4, alpha = 0.4) +
stat_smooth(col = "red") +
labs(x = "Input mRNA amount\nlog2(TPM)", y = "Detected in x\ncoacervates [%]", title = "PDDA_2")
# --- Ave ------------------
# Filter all transcripts that are present in both replicate experiments
ave_bens_plot <- inner_join(ool17_bens_plot, ool18_bens_plot, by = "target_id")
# Calc ave(input_tpm) and ave(percent) for each transcript
ave_bens_plot <- ave_bens_plot %>%
mutate(input_tpm = (ool18_input_tpm+ool17_input_tpm)/2) %>%
mutate(percent = (percent.x+percent.y)/2) %>%
select(target_id, input_tpm, percent)
# get residuals from model describing data in bens_plot
ave_bens_plot_model <- gam(percent ~ s(input_tpm, bs = "cs"), data = ave_bens_plot)
ave_bens_plot <- ave_bens_plot %>% mutate(residuals = ave_bens_plot_model$residuals)
ave_bens_plot_plot <- ggplot(data = ave_bens_plot, aes(x = input_tpm, y = percent)) +
geom_point(size = 3, alpha = .7, shape = 21) +
geom_point(data = ave_bens_plot %>% filter(residuals > 30), color = "indianred4", size = 4, alpha = 0.4) +
stat_smooth(col = "indianred2") +
scale_y_continuous(limits = c(0,105)) +
labs(x = "Input mRNA amount\nlog2(TPM)", y = "Detected in x\ncondensates [%]")
############
### PLOT ###
############
plot_grid(fus_bens_plot_plot, dhh1_bens_plot_plot, ool12_bens_plot_plot, ave_bens_plot_plot, ncol = 2)
# PDDA
venn_pdda <- ave_bens_plot %>%
filter(residuals > 30) %>% dplyr::select(target_id) %>% pull()
venn_pdda %>% length()
venn_dhh1 %>% length()
# Dhh1
venn_dhh1 <- dhh1_bens_plot %>%
filter(residuals > 30) %>% dplyr::select(target_id) %>% pull()
venn_dhh1 %>% length()
library(reshape2)
# Setup
library(tidyverse)
library(Seurat)
library(mgcv)
library(RColorBrewer)
library(reshape2)
### Load data that include read coverage cutoff
master <- readRDS(file = "../_fig4/master_cov_cutoff.RDS")
setwd("/Users/damian_wollny/PD/Data/OoL/45_github/single_coacervate_seq/_s_fig15")
### Load data that include read coverage cutoff
master <- readRDS(file = "../_fig4/master_cov_cutoff.RDS")
# ---- ool22 ----
fus_input_tpm <- master %>%
filter(experiment == "ool22_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(fus_input_tpm = log2_tpm)
fus_bens_plot <- master %>%
filter(tpm != 0) %>%
filter(experiment == "ool22") %>%
group_by(target_id) %>%
summarise(ave_tpm = mean(log2_tpm), count = n()) %>%
inner_join(.,fus_input_tpm, by="target_id") %>% distinct() %>%
arrange(desc(count)) %>%
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
fus_bens_plot_model <- gam(percent ~ s(fus_input_tpm, bs = "cs"), data = fus_bens_plot)
fus_outliers <- fus_bens_plot %>% mutate(residuals = fus_bens_plot_model$residuals) %>% filter(residuals > 30) %>% pull(target_id)
# Scaled & normalized data for outliers only
norm_scale_fus_data <- master %>% filter(experiment == "ool22" | experiment == "ool22_input") %>%
filter(target_id %in% fus_outliers) %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
select(new_cell_id, target_id, experiment, tpm) %>%
mutate(trans_tpm = log2(tpm+1)) %>%
filter(trans_tpm != 0) %>%
group_by(target_id) %>%
# if a gene does not exist in the input -> set to 1:
mutate(dummy_col = ifelse(any(grepl("ool22_input", experiment)), trans_tpm[experiment == "ool22_input"], 1)) %>%
# filter out genes that occur only once (cannot scale them):
mutate(count_transc = n()) %>%
filter(count_transc != 1) %>%
# normalize
mutate(norm_tpm = trans_tpm/dummy_col) %>%
# scale
mutate_at("norm_tpm", funs(scale(.))) %>%
# clean up
filter(experiment != "ool22_input") %>%
select(new_cell_id, target_id, norm_tpm)
### Create input files for Seurat object #########
##################################################
######### First, get outlier transcripts for each experiment: #########
# ---- ool22 ----
fus_input_tpm <- master %>%
filter(experiment == "ool22_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(fus_input_tpm = log2_tpm)
fus_bens_plot <- master %>%
filter(tpm != 0) %>%
filter(experiment == "ool22") %>%
group_by(target_id) %>%
summarise(ave_tpm = mean(log2_tpm), count = n()) %>%
inner_join(.,fus_input_tpm, by="target_id") %>% distinct() %>%
arrange(desc(count)) %>%
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
fus_bens_plot_model <- gam(percent ~ s(fus_input_tpm, bs = "cs"), data = fus_bens_plot)
fus_outliers <- fus_bens_plot %>% mutate(residuals = fus_bens_plot_model$residuals) %>% filter(residuals > 30) %>% pull(target_id)
# Scaled & normalized data for outliers only
norm_scale_fus_data <- master %>% filter(experiment == "ool22" | experiment == "ool22_input") %>%
filter(target_id %in% fus_outliers) %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
select(new_cell_id, target_id, experiment, tpm) %>%
mutate(trans_tpm = log2(tpm+1)) %>%
filter(trans_tpm != 0) %>%
group_by(target_id) %>%
# if a gene does not exist in the input -> set to 1:
mutate(dummy_col = ifelse(any(grepl("ool22_input", experiment)), trans_tpm[experiment == "ool22_input"], 1)) %>%
# filter out genes that occur only once (cannot scale them):
mutate(count_transc = n()) %>%
filter(count_transc != 1) %>%
# normalize
mutate(norm_tpm = trans_tpm/dummy_col) %>%
# scale
mutate_at("norm_tpm", funs(scale(.))) %>%
# clean up
filter(experiment != "ool22_input") %>%
select(new_cell_id, target_id, norm_tpm)
# ---- ool24_2 ----
dhh1_input_tpm <- master %>%
filter(experiment == "ool24_2_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(dhh1_input_tpm = log2_tpm)
dhh1_bens_plot <- master %>%
filter(tpm != 0) %>%
filter(experiment == "ool24_2") %>%
group_by(target_id) %>%
summarise(ave_tpm = mean(log2_tpm), count = n()) %>%
inner_join(.,dhh1_input_tpm, by="target_id") %>% distinct() %>%
arrange(desc(count)) %>%
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
dhh1_bens_plot_model <- gam(percent ~ s(dhh1_input_tpm, bs = "cs"), data = dhh1_bens_plot)
dhh1_outliers <- dhh1_bens_plot %>% mutate(residuals = dhh1_bens_plot_model$residuals) %>% filter(residuals > 30) %>% pull(target_id)
# Scaled & normalized data for outliers only
norm_scale_dhh1_data <- master %>% filter(experiment == "ool24_2" | experiment == "ool24_2_input") %>%
filter(target_id %in% dhh1_outliers) %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
select(new_cell_id, target_id, experiment, tpm) %>%
mutate(trans_tpm = log2(tpm+1)) %>%
filter(trans_tpm != 0) %>%
group_by(target_id) %>%
# if a gene does not exist in the input -> set to 1:
mutate(dummy_col = ifelse(any(grepl("ool24_2_input", experiment)), trans_tpm[experiment == "ool24_2_input"], 1)) %>%
# filter out genes that occur only once (cannot scale them):
mutate(count_transc = n()) %>%
filter(count_transc != 1) %>%
# normalize
mutate(norm_tpm = trans_tpm/dummy_col) %>%
# scale
mutate_at("norm_tpm", funs(scale(.))) %>%
# clean up
filter(experiment != "ool24_2_input") %>%
select(new_cell_id, target_id, norm_tpm)
# ---- ool17 ----
pdda1_input_tpm <- master %>%
filter(experiment == "ool17_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(pdda1_input_tpm = log2_tpm)
pdda1_bens_plot <- master %>%
filter(tpm != 0) %>%
filter(experiment == "ool17") %>%
group_by(target_id) %>%
summarise(ave_tpm = mean(log2_tpm), count = n()) %>%
inner_join(.,pdda1_input_tpm, by="target_id") %>% distinct() %>%
arrange(desc(count)) %>%
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
pdda1_bens_plot_model <- gam(percent ~ s(pdda1_input_tpm, bs = "cs"), data = pdda1_bens_plot)
pdda1_outliers <- pdda1_bens_plot %>% mutate(residuals = pdda1_bens_plot_model$residuals) %>% filter(residuals > 30) %>% pull(target_id)
# Scaled & normalized data for outliers only
norm_scale_pdda1_data <- master %>% filter(experiment == "ool17" | experiment == "ool17_input") %>%
filter(target_id %in% pdda1_outliers) %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
select(new_cell_id, target_id, experiment, tpm) %>%
mutate(trans_tpm = log2(tpm+1)) %>%
filter(trans_tpm != 0) %>%
group_by(target_id) %>%
# if a gene does not exist in the input -> set to 1:
mutate(dummy_col = ifelse(any(grepl("ool17_input", experiment)), trans_tpm[experiment == "ool17_input"], 1)) %>%
# filter out genes that occur only once (cannot scale them):
mutate(count_transc = n()) %>%
filter(count_transc != 1) %>%
# normalize
mutate(norm_tpm = trans_tpm/dummy_col) %>%
# scale
mutate_at("norm_tpm", funs(scale(.))) %>%
# clean up
filter(experiment != "ool17_input") %>%
select(new_cell_id, target_id, norm_tpm)
# ---- ool18 ----
pdda2_input_tpm <- master %>%
filter(experiment == "ool18_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(pdda2_input_tpm = log2_tpm)
pdda2_bens_plot <- master %>%
filter(tpm != 0) %>%
filter(experiment == "ool18") %>%
group_by(target_id) %>%
summarise(ave_tpm = mean(log2_tpm), count = n()) %>%
inner_join(.,pdda2_input_tpm, by="target_id") %>% distinct() %>%
arrange(desc(count)) %>%
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
pdda2_bens_plot_model <- gam(percent ~ s(pdda2_input_tpm, bs = "cs"), data = pdda2_bens_plot)
pdda2_outliers <- pdda2_bens_plot %>% mutate(residuals = pdda2_bens_plot_model$residuals) %>% filter(residuals > 30) %>% pull(target_id)
# Scaled & normalized data for outliers only
norm_scale_pdda2_data <- master %>% filter(experiment == "ool18" | experiment == "ool18_input") %>%
filter(target_id %in% pdda2_outliers) %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
select(new_cell_id, target_id, experiment, tpm) %>%
mutate(trans_tpm = log2(tpm+1)) %>%
filter(trans_tpm != 0) %>%
group_by(target_id) %>%
# if a gene does not exist in the input -> set to 1:
mutate(dummy_col = ifelse(any(grepl("ool18_input", experiment)), trans_tpm[experiment == "ool18_input"], 1)) %>%
# filter out genes that occur only once (cannot scale them):
mutate(count_transc = n()) %>%
filter(count_transc != 1) %>%
# normalize
mutate(norm_tpm = trans_tpm/dummy_col) %>%
# scale
mutate_at("norm_tpm", funs(scale(.))) %>%
# clean up
filter(experiment != "ool18_input") %>%
select(new_cell_id, target_id, norm_tpm)
# ---- ool12 ----
lys_input_tpm <- master %>%
filter(experiment == "ool12_input") %>%
filter(tpm != 0) %>%
group_by(target_id) %>%
summarise(lys_input_tpm = log2_tpm)
lys_bens_plot <- master %>%
filter(tpm != 0) %>%
filter(experiment == "ool12") %>%
group_by(target_id) %>%
summarise(ave_tpm = mean(log2_tpm), count = n()) %>%
inner_join(.,lys_input_tpm, by="target_id") %>% distinct() %>%
arrange(desc(count)) %>%
mutate(percent = count*100/max(count))
# get residuals from model describing data in bens_plot
lys_bens_plot_model <- gam(percent ~ s(lys_input_tpm, bs = "cs"), data = lys_bens_plot)
lys_outliers <- lys_bens_plot %>% mutate(residuals = lys_bens_plot_model$residuals) %>% filter(residuals > 30) %>% pull(target_id)
# Scaled & normalized data for outliers only
norm_scale_lys_data <- master %>% filter(experiment == "ool12" | experiment == "ool12_input") %>%
filter(target_id %in% lys_outliers) %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
select(new_cell_id, target_id, experiment, tpm) %>%
mutate(trans_tpm = log2(tpm+1)) %>%
filter(trans_tpm != 0) %>%
group_by(target_id) %>%
# if a gene does not exist in the input -> set to 1:
mutate(dummy_col = ifelse(any(grepl("ool12_input", experiment)), trans_tpm[experiment == "ool12_input"], 1)) %>%
# filter out genes that occur only once (cannot scale them):
mutate(count_transc = n()) %>%
filter(count_transc != 1) %>%
# normalize
mutate(norm_tpm = trans_tpm/dummy_col) %>%
# scale
mutate_at("norm_tpm", funs(scale(.))) %>%
# clean up
filter(experiment != "ool12_input") %>%
select(new_cell_id, target_id, norm_tpm)
######### Second, combine all outliers data: #########
master_outliers <- bind_rows(norm_scale_lys_data, norm_scale_pdda1_data, norm_scale_pdda2_data, norm_scale_fus_data, norm_scale_dhh1_data)
# Cast data into matrix format
master_cast <- acast(master_outliers, target_id~new_cell_id)
master_cast[is.na(master_cast)] = 0
# Create matadata for Seurat object
master_meta <- master %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
filter(droplet_type != "input") %>%
select(new_cell_id, experiment, FSC, p_pseudoaligned, droplet_type) %>%
distinct() %>%
left_join(., num_genes, by = "new_cell_id") %>%
#left_join(., master_avel_avegc, by = "new_cell_id") %>%
mutate(droplet_type=replace(droplet_type, droplet_type=="pdda", "PDDA")) %>%
mutate(droplet_type=replace(droplet_type, droplet_type=="lys", "Lysine")) %>%
mutate(droplet_type=replace(droplet_type, droplet_type=="dhh1", "Dhh1")) %>%
mutate(droplet_type=replace(droplet_type, droplet_type=="fus", "FUS"))
# Use cell_id as row.names
row.names(master_meta) <- master_meta[,1]
master_meta <- master_meta %>% select(-new_cell_id)
# Create Seurat Object
master_seurat <- CreateSeuratObject(counts = master_cast, min.cells = 3, meta.data = master_meta)
# Create matadata for Seurat object
master_meta <- master %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
filter(droplet_type != "input") %>%
select(new_cell_id, experiment, FSC, p_pseudoaligned, droplet_type) %>%
distinct() %>%
#left_join(., num_genes, by = "new_cell_id") %>%
#left_join(., master_avel_avegc, by = "new_cell_id") %>%
mutate(droplet_type=replace(droplet_type, droplet_type=="pdda", "PDDA")) %>%
mutate(droplet_type=replace(droplet_type, droplet_type=="lys", "Lysine")) %>%
mutate(droplet_type=replace(droplet_type, droplet_type=="dhh1", "Dhh1")) %>%
mutate(droplet_type=replace(droplet_type, droplet_type=="fus", "FUS"))
# Use cell_id as row.names
row.names(master_meta) <- master_meta[,1]
master_meta <- master_meta %>% select(-new_cell_id)
# Scale data
all.genes <- rownames(master_seurat)
master_seurat[["RNA"]]@scale.data <- master_cast
# Use cell_id as row.names
row.names(master_meta) <- master_meta[,1]
master_meta <- master_meta %>% select(-new_cell_id)
# Create Seurat Object
master_seurat <- CreateSeuratObject(counts = master_cast, min.cells = 3, meta.data = master_meta)
# Scale data
all.genes <- rownames(master_seurat)
master_seurat[["RNA"]]@scale.data <- master_cast
# PCA analysis: use variable genes
master_seurat <- RunPCA(master_seurat, features = all.genes)
# Clustering
master_seurat <- FindNeighbors(master_seurat, dims = 1:5)
master_seurat <- FindClusters(master_seurat, resolution = 0.6)
# UMAP
master_seurat <- RunUMAP(master_seurat, dims = 1:5)
# Plotting
DimPlot(master_seurat, reduction = "umap", pt.size = 2, cols = brewer.pal(n = 6, name = "RdBu"))
# --- Export for figure:  ---
pca5_umap <- DimPlot(master_seurat, reduction = "umap", group.by = "droplet_type",  pt.size = 3, cols = brewer.pal(n = 4, name = "RdBu")) +
scale_fill_distiller(name = "Condensate\ntype") +
theme_classic(base_size = 24) +
theme(legend.position = c(0.93, 0.9), legend.key.size = unit(.6, "cm"), legend.text = element_text(size = 20),
axis.title = element_blank(), axis.text = element_blank(), axis.line = element_blank(), axis.ticks = element_blank())
# --- Export for figure:  ---
FeaturePlot(object = master_seurat, features = "FSC", pt.size = 3) +
scale_colour_gradientn(colours = rev(brewer.pal(n = 11, name = "Spectral")), values = rev(c(1.0,0.5,0.3,0.2,0.1,0))) +
theme_classic(base_size = 24) +
theme(legend.position = c(0.9 ,0.9), legend.key.size = unit(.6, "cm"), legend.key.width = unit(.3,"cm"),
axis.title = element_blank(), axis.text = element_blank(), axis.line = element_blank(), axis.ticks = element_blank()) +
labs(title = "")
?gsub
library(biomaRt)
library(ggrepel)
# Analysis by Zhisong He:
library(Seurat)
master_seurat <- readRDS("master_seurat_obj.RDS")
master_seurat <- RunPCA(master_seurat, features = all.genes)
master_seurat <- FindNeighbors(master_seurat, dims = 1:5)
master_seurat <- FindClusters(master_seurat, resolution = 0.6)
master_seurat <- RunUMAP(master_seurat, dims = 1:5)
DimPlot(master_seurat, reduction = "umap", group.by = "droplet_type",  pt.size = 2)
master_seurat$group <- ifelse(master_seurat$droplet_type %in% c("FUS","PDDA"),1,2)
DE <- FindMarkers(master_seurat, group.by="group", ident.1=1, ident.2=2, logfc.threshold = 0, min.pct = 0, min.cells.feature = 0, min.cells.group = 0, pseudocount.use = 0)
DE$diff <- (rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==1)]) - rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==2)]))[rownames(DE)]
write.table(DE[,-c(2)], file="./DE_droplettypes.tsv", quote=F, sep="\t")
# The rest in my mess
test <- read.table(file = "./DE_droplettypes.tsv", row.names = NULL) %>%
rename("target_id" = "row.names") %>%
as.tbl()
# Format target_id for biomaRt
test[,1] <- gsub("\\..*","",test$target_id)
# Function to get transcript names
mart <- biomaRt::useDataset(dataset = "hsapiens_gene_ensembl",
mart    = useMart("ENSEMBL_MART_ENSEMBL",
host    = "www.ensembl.org"))
# Create Seurat Object
master_seurat <- CreateSeuratObject(counts = master_cast, min.cells = 3, meta.data = master_meta)
# Scale data
all.genes <- rownames(master_seurat)
master_seurat[["RNA"]]@scale.data <- master_cast
# PCA analysis: use variable genes
master_seurat <- RunPCA(master_seurat, features = all.genes)
# Clustering
master_seurat <- FindNeighbors(master_seurat, dims = 1:5)
master_seurat <- FindClusters(master_seurat, resolution = 0.6)
# UMAP
master_seurat <- RunUMAP(master_seurat, dims = 1:5)
DimPlot(master_seurat, reduction = "umap", group.by = "droplet_type",  pt.size = 2)
# Analysis by Zhisong He:
master_seurat$group <- ifelse(master_seurat$droplet_type %in% c("FUS","PDDA"),1,2)
DE <- FindMarkers(master_seurat, group.by="group", ident.1=1, ident.2=2, logfc.threshold = 0, min.pct = 0, min.cells.feature = 0, min.cells.group = 0, pseudocount.use = 0)
DE$diff <- (rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==1)]) - rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==2)]))[rownames(DE)]
master_seurat$group
DE
(rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==1)])
)
master_seurat@assays$RNA@data[,which(master_seurat$group==1)]
DE
DE$diff <- (rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==1)]) - rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==2)]))[rownames(DE)]
?rowMeans
DE$diff <- (base::rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==1)]) - base::rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==2)]))[rownames(DE)]
base::rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==1)]
)
DE$diff <- (Matrix::rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==1)]) - Matrix::rowMeans(master_seurat@assays$RNA@data[,which(master_seurat$group==2)]))[rownames(DE)]
DE$diff
write.table(DE[,-c(2)], file="./DE_droplettypes.tsv", quote=F, sep="\t")
# The rest in my mess
test <- read.table(file = "./DE_droplettypes.tsv", row.names = NULL) %>%
rename("target_id" = "row.names") %>%
as.tbl()
# Format target_id for biomaRt
test[,1] <- gsub("\\..*","",test$target_id)
# Function to get transcript names
mart <- biomaRt::useDataset(dataset = "hsapiens_gene_ensembl",
mart    = useMart("ENSEMBL_MART_ENSEMBL",
host    = "www.ensembl.org"))
GetGeneNames <- function(df){
ensembl_list <- dplyr::select(df, target_id)
gene_names <- getBM(filters = "ensembl_transcript_id",
attributes = c("ensembl_transcript_id",
"external_gene_name"),
values = ensembl_list, mart = mart, verbose = T)
colnames(gene_names) <- c("target_id", "gene_name")
return(gene_names)
}
# Get gene names for target_ids
gene_names <- GetGeneNames(test)
# Function to get transcript names
mart <- biomaRt::useDataset(dataset = "hsapiens_gene_ensembl",
mart    = useMart("ENSEMBL_MART_ENSEMBL",
host    = "www.ensembl.org"))
biomaRt::useDataset(dataset = "hsapiens_gene_ensembl",
mart    = useMart("ENSEMBL_MART_ENSEMBL",
host    = "www.ensembl.org"))
# Function to get transcript names
mart <- biomaRt::useDataset(dataset = "hsapiens_gene_ensembl",
mart    = useMart("ENSEMBL_MART_ENSEMBL",
host    = "www.ensembl.org"))
