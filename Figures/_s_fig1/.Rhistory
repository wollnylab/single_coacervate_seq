useful_cols <- c("Gene", "Ensembl", "Chromosome", "Position", "RNA.blood.cell.specificity.score", "Subcellular.location", "cell_lineage")
# functions for cleaning up and tidying up:
# tidying up gets subcellular location in tidy format (no comma) - "disandvantage" is that it multiplies Gene names
tidy_sub_location <- function(df){
df %>%
# make subcellular location tidy
separate(Subcellular.location, sep = ",", into = c("sl_1", "sl_2")) %>%
pivot_longer(cols = c("sl_1", "sl_2"),
names_to = "sl",
values_to = "subcellular_location") %>%
select(-sl) %>%
distinct()
}
# clean up selects useful columns and replaces emtpy strings with NA
clean_up <- function(df){
df %>%
select(useful_cols) %>%
mutate(Subcellular.location = as.character(Subcellular.location)) %>%
# replace empty sting with NA
mutate_all(list(~na_if(.,"")))
}
# Chunk 3
all_blood_genes <- bind_rows(b_cells, dendritic, granu, nk_cells, t_cells, mono) %>% clean_up()
all_blood_genes %>% sample_n(10)
# Chunk 4
all_blood_genes %>% count(Gene) %>% pull(n) %>% unique()
# Chunk 5
all_blood_genes %>%
count(Chromosome) %>%
ggplot(aes(Chromosome, n, fill = Chromosome)) +
geom_col(show.legend = F) +
coord_flip()
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) #%>%
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, color = subcellular_location)) +
geom_col(show.legend = F) +
facet_grid(cell_lineage, rows = 4)
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location)
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, color = subcellular_location)) +
geom_col(show.legend = F) #+
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, fill = subcellular_location)) +
geom_col(show.legend = F) +
coord_flip()
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, fill = subcellular_location)) +
geom_col(show.legend = F) +
coord_flip() +
facet_grid(cell_lineage, rows = 4)
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, fill = subcellular_location)) +
geom_col(show.legend = F) +
coord_flip() +
facet_grid(vars(cell_lineage), rows = 4)
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, fill = subcellular_location)) +
geom_col(show.legend = F) +
coord_flip() +
facet_grid(vars(cell_lineage))
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, fill = subcellular_location)) +
geom_col(show.legend = F) +
coord_flip() +
facet_wrap(vars(cell_lineage))
filtered_all_blood
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, warning = FALSE, message = FALSE)
options(width = 12)
# Chunk 2
# Setup
library(tidyverse)
library(ggseqlogo)
library(cowplot)
library(data.table)
theme_set(theme_classic(base_size=24))
# Load data
b_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_B-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "b_cell")
dendritic <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Dendritic.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "dendritic_cell")
granu <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Granulocytes_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "granulocyte")
mono <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Monocytes_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(Chromosome = as.factor(Chromosome)) %>% mutate(cell_lineage = "monocyte")
nk_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_NK-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "nk_cell")
t_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_T-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "t_cell")
# keep the following columns:
useful_cols <- c("Gene", "Ensembl", "Chromosome", "Position", "RNA.blood.cell.specificity.score", "Subcellular.location", "cell_lineage")
# functions for cleaning up and tidying up:
# tidying up gets subcellular location in tidy format (no comma) - "disandvantage" is that it multiplies Gene names
tidy_sub_location <- function(df){
df %>%
# make subcellular location tidy
separate(Subcellular.location, sep = ",", into = c("sl_1", "sl_2")) %>%
pivot_longer(cols = c("sl_1", "sl_2"),
names_to = "sl",
values_to = "subcellular_location") %>%
select(-sl) %>%
distinct()
}
# clean up selects useful columns and replaces emtpy strings with NA
clean_up <- function(df){
df %>%
select(useful_cols) %>%
mutate(Subcellular.location = as.character(Subcellular.location)) %>%
# replace empty sting with NA
mutate_all(list(~na_if(.,"")))
}
# Chunk 3
all_blood_genes <- bind_rows(b_cells, dendritic, granu, nk_cells, t_cells, mono) %>% clean_up()
all_blood_genes %>% sample_n(10)
# Chunk 4
all_blood_genes %>% count(Gene) %>% pull(n) %>% unique()
# Chunk 5
all_blood_genes %>%
count(Chromosome) %>%
ggplot(aes(Chromosome, n, fill = Chromosome)) +
geom_col(show.legend = F) +
coord_flip()
# Chunk 6
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, fill = subcellular_location)) +
geom_col(show.legend = F) +
coord_flip() +
facet_wrap(vars(cell_lineage))
# Chunk 7
all_blood_genes %>%
ggplot(aes(RNA.blood.cell.specificity.score)) +
geom_histogram(color = "white") +
scale_x_log10()
# Chunk 8
all_blood_genes %>%
select(Gene, RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
head()
all_blood_genes %>%
select(Gene, RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
tail()
# Chunk 9
filtered_all_blood <- all_blood_genes %>%
filter(RNA.blood.cell.specificity.score > 10, !is.na(RNA.blood.cell.specificity.score))
print("sanity check")
filtered_all_blood %>%
select(RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
head()
filtered_all_blood %>%
select(RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
tail()
filtered_all_blood
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, warning = FALSE, message = FALSE)
#options(width = 12)
# Chunk 2
# Setup
library(tidyverse)
library(ggseqlogo)
library(cowplot)
library(data.table)
theme_set(theme_classic(base_size=24))
# Load data
b_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_B-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "b_cell")
dendritic <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Dendritic.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "dendritic_cell")
granu <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Granulocytes_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "granulocyte")
mono <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Monocytes_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(Chromosome = as.factor(Chromosome)) %>% mutate(cell_lineage = "monocyte")
nk_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_NK-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "nk_cell")
t_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_T-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "t_cell")
# keep the following columns:
useful_cols <- c("Gene", "Ensembl", "Chromosome", "Position", "RNA.blood.cell.specificity.score", "Subcellular.location", "cell_lineage")
# functions for cleaning up and tidying up:
# tidying up gets subcellular location in tidy format (no comma) - "disandvantage" is that it multiplies Gene names
tidy_sub_location <- function(df){
df %>%
# make subcellular location tidy
separate(Subcellular.location, sep = ",", into = c("sl_1", "sl_2")) %>%
pivot_longer(cols = c("sl_1", "sl_2"),
names_to = "sl",
values_to = "subcellular_location") %>%
select(-sl) %>%
distinct()
}
# clean up selects useful columns and replaces emtpy strings with NA
clean_up <- function(df){
df %>%
select(useful_cols) %>%
mutate(Subcellular.location = as.character(Subcellular.location)) %>%
# replace empty sting with NA
mutate_all(list(~na_if(.,"")))
}
# Chunk 3
all_blood_genes <- bind_rows(b_cells, dendritic, granu, nk_cells, t_cells, mono) %>% clean_up()
all_blood_genes %>% sample_n(10)
# Chunk 4
all_blood_genes %>% count(Gene) %>% pull(n) %>% unique()
# Chunk 5
all_blood_genes %>%
count(Chromosome) %>%
ggplot(aes(Chromosome, n, fill = Chromosome)) +
geom_col(show.legend = F) +
coord_flip()
# Chunk 6
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, fill = subcellular_location)) +
geom_col(show.legend = F) +
coord_flip() +
facet_wrap(vars(cell_lineage))
# Chunk 7
all_blood_genes %>%
ggplot(aes(RNA.blood.cell.specificity.score)) +
geom_histogram(color = "white") +
scale_x_log10()
# Chunk 8
all_blood_genes %>%
select(Gene, RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
head()
all_blood_genes %>%
select(Gene, RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
tail()
# Chunk 9
filtered_all_blood <- all_blood_genes %>%
filter(RNA.blood.cell.specificity.score > 10, !is.na(RNA.blood.cell.specificity.score))
print("sanity check")
filtered_all_blood %>%
select(RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
head()
filtered_all_blood %>%
select(RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
tail()
# Chunk 10
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, warning = FALSE, message = FALSE)
#options(width = 12)
# Chunk 2
# Setup
library(tidyverse)
library(ggseqlogo)
library(cowplot)
library(data.table)
theme_set(theme_classic(base_size=24))
# Load data
b_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_B-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "b_cell")
dendritic <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Dendritic.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "dendritic_cell")
granu <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Granulocytes_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "granulocyte")
mono <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_Monocytes_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(Chromosome = as.factor(Chromosome)) %>% mutate(cell_lineage = "monocyte")
nk_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_NK-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "nk_cell")
t_cells <- read.csv(file = "/Users/damian_wollny/PI/Data/12_blood_specific_genes/blood_cell_lineage_category_rna_T-cells_Lineage.tsv", sep = "\t") %>% as.tbl() %>% mutate(cell_lineage = "t_cell")
# keep the following columns:
useful_cols <- c("Gene", "Ensembl", "Chromosome", "Position", "RNA.blood.cell.specificity.score", "Subcellular.location", "cell_lineage")
# functions for cleaning up and tidying up:
# tidying up gets subcellular location in tidy format (no comma) - "disandvantage" is that it multiplies Gene names
tidy_sub_location <- function(df){
df %>%
# make subcellular location tidy
separate(Subcellular.location, sep = ",", into = c("sl_1", "sl_2")) %>%
pivot_longer(cols = c("sl_1", "sl_2"),
names_to = "sl",
values_to = "subcellular_location") %>%
select(-sl) %>%
distinct()
}
# clean up selects useful columns and replaces emtpy strings with NA
clean_up <- function(df){
df %>%
select(useful_cols) %>%
mutate(Subcellular.location = as.character(Subcellular.location)) %>%
# replace empty sting with NA
mutate_all(list(~na_if(.,"")))
}
# Chunk 3
all_blood_genes <- bind_rows(b_cells, dendritic, granu, nk_cells, t_cells, mono) %>% clean_up()
all_blood_genes %>% sample_n(10)
# Chunk 4
all_blood_genes %>% count(Gene) %>% pull(n) %>% unique()
# Chunk 5
all_blood_genes %>%
count(Chromosome) %>%
ggplot(aes(Chromosome, n, fill = Chromosome)) +
geom_col(show.legend = F) +
coord_flip()
# Chunk 6
all_blood_genes %>%
tidy_sub_location() %>%
select(Gene, cell_lineage, subcellular_location) %>%
filter(!is.na(subcellular_location)) %>%
distinct() %>%
group_by(cell_lineage) %>%
count(subcellular_location) %>%
ggplot(aes(subcellular_location, n, fill = subcellular_location)) +
geom_col(show.legend = F) +
coord_flip() +
facet_wrap(vars(cell_lineage))
# Chunk 7
all_blood_genes %>%
ggplot(aes(RNA.blood.cell.specificity.score)) +
geom_histogram(color = "white") +
scale_x_log10()
# Chunk 8
all_blood_genes %>%
select(Gene, RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
head()
all_blood_genes %>%
select(Gene, RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
tail()
# Chunk 9
filtered_all_blood <- all_blood_genes %>%
filter(RNA.blood.cell.specificity.score > 10, !is.na(RNA.blood.cell.specificity.score))
print("sanity check")
filtered_all_blood %>%
select(RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
head()
filtered_all_blood %>%
select(RNA.blood.cell.specificity.score) %>%
arrange(RNA.blood.cell.specificity.score) %>%
tail()
# Chunk 10
filtered_all_blood
getwd()
write.csv(filtered_all_blood, file = "~/PI/Data/12_blood_specific_genes/blood_specific_genes.csv")
# Factor -> numeric conversion for FSC/SSC values:
# Get rid of commas and convert
for (i in 4:5){
index_plate2[,i] <- gsub(",", "", index_plate2[,i])
index_plate2[,i] <- as.numeric(as.character(index_plate2[,i]))
}
# Format dataframe for plate1
kall_plate1 <- kallisto %>%
filter(!grepl("^P2", row.names)) %>%
mutate(cell_id = str_remove(string = row.names, pattern = "^..")) %>%
mutate(log2_tpm = log2(tpm)) %>%
dplyr::select(-starts_with("row.names")) %>% # select needs specification or else R gets confused
dplyr::select(cell_id, everything())
# Format dataframe for plate2
kall_plate2 <- kallisto %>%
filter(!grepl("^P1", row.names)) %>%
mutate(cell_id = str_remove(string = row.names, pattern = "^..")) %>%
mutate(log2_tpm = log2(tpm)) %>%
dplyr::select(-starts_with("row.names")) %>% # select needs specification or else R gets confused
dplyr::select(cell_id, everything()) %>%
left_join(dplyr::select(index_plate2, Well, All.Events.FSC.A.Mean, All.Events.SSC.A.Mean), by = c("cell_id" = "Well")) %>%
rename(FSC = All.Events.FSC.A.Mean) %>%
rename(SSC = All.Events.SSC.A.Mean)
# Variables to select x coacervate / well
p1_1000coa <- c(paste("A", c(1:12), sep = ""), paste("B", c(1:12), sep = ""))
p1_100coa <- c(paste("C", c(1:12), sep = ""), paste("D", c(1:12), sep = ""))
p1_10coa <- c(paste("E", c(1:12), sep = ""), paste("F", c(1:12), sep = ""))
p1_1coa <- c(paste("G", c(1:12), sep = ""), paste("H", c(1:12), sep = ""))
# Example of cleaned up Plate 2 data
sample_n(kall_plate2, 10)
library(reshape2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(biomaRt)
library(gridExtra)
library(RColorBrewer)
library(Seurat)
library(VennDiagram)
### Import kallisto output
kallisto <- read.table("/Users/damian_wollny/PD/Data/OoL/9_Single_Coacervate_Seq_-_2nd_attempt/SEQ_DATA/Kallisto/xxx.DamiansMatrix.tsv.header.final", header = T, sep = "\t", row.names = NULL)
test <- dplyr::sample_n(kallisto, 10)
# Format target_id for biomaRt
kallisto[,2] <- gsub("\\..*","",kallisto$target_id)
# Biomart function to get transcript length
mart <- biomaRt::useDataset(dataset = "hsapiens_gene_ensembl",
mart    = useMart("ENSEMBL_MART_ENSEMBL",
host    = "www.ensembl.org"))
GetGeneNames <- function(df){
ensembl_list <- dplyr::select(df, target_id)
gene_names <- getBM(filters = "ensembl_transcript_id",
attributes = c("ensembl_transcript_id",
"external_gene_name"),
values = ensembl_list, mart = mart, verbose = T)
colnames(gene_names) <- c("target_id", "gene_name")
return(gene_names)
}
### Import Index FACS output
# Plate1 was not index sorted because multiple coacervates were sorted
index_plate2 <- read.csv("/Users/damian_wollny/PD/Data/OoL/9_Single_Coacervate_Seq_-_2nd_attempt/FACS_DATA/indexsort_plate2.txt", skip = 15)
# Factor -> numeric conversion for FSC/SSC values:
# Get rid of commas and convert
for (i in 4:5){
index_plate2[,i] <- gsub(",", "", index_plate2[,i])
index_plate2[,i] <- as.numeric(as.character(index_plate2[,i]))
}
# Format dataframe for plate1
kall_plate1 <- kallisto %>%
filter(!grepl("^P2", row.names)) %>%
mutate(cell_id = str_remove(string = row.names, pattern = "^..")) %>%
mutate(log2_tpm = log2(tpm)) %>%
dplyr::select(-starts_with("row.names")) %>% # select needs specification or else R gets confused
dplyr::select(cell_id, everything())
# Format dataframe for plate2
kall_plate2 <- kallisto %>%
filter(!grepl("^P1", row.names)) %>%
mutate(cell_id = str_remove(string = row.names, pattern = "^..")) %>%
mutate(log2_tpm = log2(tpm)) %>%
dplyr::select(-starts_with("row.names")) %>% # select needs specification or else R gets confused
dplyr::select(cell_id, everything()) %>%
left_join(dplyr::select(index_plate2, Well, All.Events.FSC.A.Mean, All.Events.SSC.A.Mean), by = c("cell_id" = "Well")) %>%
rename(FSC = All.Events.FSC.A.Mean) %>%
rename(SSC = All.Events.SSC.A.Mean)
# Variables to select x coacervate / well
p1_1000coa <- c(paste("A", c(1:12), sep = ""), paste("B", c(1:12), sep = ""))
p1_100coa <- c(paste("C", c(1:12), sep = ""), paste("D", c(1:12), sep = ""))
p1_10coa <- c(paste("E", c(1:12), sep = ""), paste("F", c(1:12), sep = ""))
p1_1coa <- c(paste("G", c(1:12), sep = ""), paste("H", c(1:12), sep = ""))
# Example of cleaned up Plate 2 data
sample_n(kall_plate2, 10)
kall_plate2 %>% count(cell_id, sort = T)
kall_plate2 %>% filter(tpm != 0) %>% count(cell_id, sort = T)
kall_plate2 %>% filter(tpm != 0) %>% count(cell_id, sort = T) %>% View()
head(kall_plate2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = FALSE, message = FALSE)
options(width = 12)
# Chunk 2
# Setup
library(tidyverse)
library(cowplot)
library(gridExtra)
theme_set(theme_classic(base_size=24))
setwd(dir = "~/PD/Data/OoL/38_Draft_4/_s_fig1/")
# Chunk 3
x <- c(64340.3,49921.4,7770.1,8006.3,2144.8,1691.1,275.1,272.8,235.1,327.3)
y <- c(1000,1000,100,100,10,10,1,1,1,1)
x_name <- "molarity"
y_name <- "num_coac"
bioanalyzer_data <- data.frame(x,y)
names(bioanalyzer_data) <- c(x_name,y_name)
bioanalyzer_data
model <- lm(num_coac ~ molarity, bioanalyzer_data)
r2 <- summary(model)$r.squared
plot <- ggplot(data = bioanalyzer_data, aes(x = (num_coac), y = molarity)) +
geom_point() +
geom_smooth(method = "lm") +
annotate(geom = 'text', label = paste("R^2 = ", round(r2,2), sep=""), x = 12, y = 6e4, hjust = -.0, vjust = 0, size = 8) +
labs(y = "Molarity [pM]", x = "Number of condensates")
#ggsave(plot, file="./s_fig1e_plot.pdf", width = 6, height = 6, device = "pdf")
plot
