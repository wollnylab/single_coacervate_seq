group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette="GnBu", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
no_legend
no_legend <- output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette="YlGnBu", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
no_legend
ggsave(filename = "~/PD/Data/OoL/36_motif_sine_comparison/no_legend.pdf", plot = no_legend, device = "pdf", dpi = 300, width = 12, height = 2)
ggsave(filename = "~/PD/Data/OoL/36_motif_sine_comparison/no_legend.pdf", plot = no_legend, device = "pdf", dpi = 300, width = 12, height = 4)
ggsave(filename = "~/PD/Data/OoL/36_motif_sine_comparison/no_legend.pdf", plot = no_legend, device = "pdf", dpi = 300, width = 12, height = 3)
no_legend <- output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette="Blues", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
ggsave(filename = "~/PD/Data/OoL/36_motif_sine_comparison/no_legend.pdf", plot = no_legend, device = "pdf", dpi = 300, width = 12, height = 3)
no_legend <- output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette="Blues", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
ggsave(filename = "~/PD/Data/OoL/36_motif_sine_comparison/no_legend.pdf", plot = no_legend, device = "pdf", dpi = 300, width = 12, height = 3)
no_legend <- output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette="Blues", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
ggsave(filename = "~/PD/Data/OoL/36_motif_sine_comparison/no_legend.pdf", plot = no_legend, device = "pdf", dpi = 300, width = 12, height = 3)
ggsave(filename = "~/PD/Data/OoL/36_motif_sine_comparison/no_legend.pdf", plot = no_legend, device = "pdf", dpi = 300, width = 12, height = 5)
no_legend <- output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette="Reds", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
no_legend
no_legend <- output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette="Reds 3", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
colfunc <- colorRampPalette(c("black", "white"))
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
colfunc <- colorRampPalette(c("white", "red"))
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
no_legend <- output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette=colfunc, direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
no_legend <- output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_distiller(palette="Blues", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_gradient(low="white", high = "blue", direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_gradient(low="white", high = "blue")+#, direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_gradient(low="white", high = "red")+#, direction=1, values = rev(c(1.0,0.8,0.75,0.7,0.6,0))) +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_gradientn(colfunc(10))+
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_gradientn(colours = colfunc(10))+
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
colfunc <- colorRampPalette(c("white", "9E0142"))
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
colfunc <- colorRampPalette(c("white", "9E0142"))
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_gradientn(colours = Spectral(10))+
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_gradientn(colours = "Spectral"(10))+
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
colfunc <- colorRampPalette(c("white", "idianred3"))
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
colfunc <- colorRampPalette(c("white", "idienred3"))
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
colfunc <- colorRampPalette(c("white", "red"))
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
colfunc <- colorRampPalette(c("white", "blue"))
plot(rep(1,10),col=colfunc(10),pch=19,cex=3)
output_df %>%
filter(motif_source == "enriched") %>%
mutate(motif = factor(motif, levels = rev(c("MEME-1", "MEME-2", "MEME-3", "MEME-4", "MEME-5",
"MEME-6", "MEME-7", "MEME-8", "MEME-9", "MEME-10")))) %>%
group_by(sine,motif) %>%
summarise(ave_score = mean(align_score)) %>%
ggplot(aes(x = sine, y = motif, fill = ave_score)) +
geom_tile(color = "white") +
scale_fill_gradientn(colours = colfunc(10))+
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank())
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, warning = FALSE, message = FALSE)
options(width = 12)
# Chunk 2
# Setup
library(tidyverse)
library(circlize)
library(RColorBrewer)
theme_set(theme_classic(base_size=24))
setwd(dir = "~/PD/Data/OoL/33_Draft_3/_s_fig4/")
# --- colors for this figure
# color: "spectral"
fig3_cols <- brewer.pal(n = 10, name = "Spectral")
fig3_cols[5] <- "#fdcc3f"
fig3_cols[6] <- "#d5ee52"
# function to make colors transparent
makeTransparent = function(..., alpha=0.5) {
if(alpha<0 | alpha>1) stop("alpha must be between 0 and 1")
alpha = floor(255*alpha)
newColor = col2rgb(col=unlist(list(...)), alpha=FALSE)
.makeTransparent = function(col, alpha) {
rgb(red=col[1], green=col[2], blue=col[3], alpha=alpha, maxColorValue=255)
}
newColor = apply(newColor, 2, .makeTransparent, alpha=alpha)
return(newColor)
}
# Chunk 3
# Get parsed meme data from random transcripts
random_trans <- read.csv(file = "~/PD/Data/OoL/18.2_integrative_analysis/_1_comparison/_even_newer_meme_analysis/_ave_pdda_coac/_meme_output/_random_transcripts/resids/parsed_meme_output.csv")
# reorder factor levels according to MEME enrichment score
level_order <- c(5,9,7,10,4,8,6,2,3,1)
random_trans$motif <- factor(random_trans$motif,levels = levels(random_trans$motif)[level_order])
random_trans <- random_trans %>% mutate(motif_rank = as.integer((random_trans$motif)))
# Calculate size of the gaps between all motifs for each transcript
random_trans_dist <- random_trans %>%
group_by(transcript) %>%
arrange(start) %>%
mutate(dist = start - lag(start)) %>% # distance to previous motif
mutate(previous_motif = lag(motif_rank)) %>% # what is the previous motif
filter(!is.na(dist))
# New facet label names for motif_rank variables
facet.labs.r <- paste("Motif: ", random_trans_dist$motif_rank)
names(facet.labs.r) <- c(random_trans_dist$motif_rank)
### RANDOM: distances of the motifs to the previous motif across transcripts:
supp_fig <- random_trans_dist %>% ggplot(aes(dist)) +
geom_density(aes(color = as.factor(motif_rank), fill = as.factor(motif_rank))) +
facet_wrap(.~motif_rank, scales = "free_y", nrow = 2, labeller = labeller(motif_rank = facet.labs.r)) +
scale_x_log10() +
scale_color_manual(values = fig3_cols) +
scale_fill_manual(values = makeTransparent(fig3_cols)) +
labs(x = "Distance to closest previous motif [bp]") +
theme(legend.position = "none", strip.text.x = element_text(size = 16), axis.text.x = element_text(size = 18, angle = 45, vjust = .6))
plot(supp_fig)
ggsave(supp_fig, file="./supp_fig4.pdf", width = 12, height = 6)
getwd()
# Chunk 1: setup
knitr::opts_chunk$set(echo = T, warning = FALSE, message = FALSE)
#options(width = 12)
# Chunk 2
# Setup
library(tidyverse)
library(factoextra)
library(cowplot)
theme_set(theme_classic(base_size=24))
setwd(dir = "~/PD/Data/OoL/33_Draft_3/_fig1/")
# Chunk 3
# Load seq data
master <- readRDS(file = "/Users/damian_wollny/PD/Data/OoL/19.1_Draft_2/Generate_input/draft2_input.RDS")
# Chunk 4
a_scheme <- ggdraw() + draw_image("/Users/damian_wollny/PD/Schemes/OoL/fig1.5.png")
plot(a_scheme)
# Chunk 5
# load FACS data
facs_data <- readRDS(file = "/Users/damian_wollny/PD/Data/OoL/18.2_integrative_analysis/_8_coacervate_size_comp/master_facs.RDS")
# Format data: PDDA(no RNA)
fig1b_data_no_rna <- facs_data %>% filter(experiment == "ool17_noRNA" | experiment == "ool18_noRNA") %>%
mutate(log2_FSC = log2(`FSC-A`)) %>%
mutate(log2_SSC = log2(`SSC-A`))
fig1b_m_no_rna <- lm(`SSC-A` ~ `FSC-A`, fig1b_data_no_rna)
fig1b_r2_no_rna <- as.character(paste("R^2 =", round(summary(fig1b_m_no_rna)$r.squared, 3), sep = " "))
fig1b_pears_no_rna <- paste("r = ", round(cor(fig1b_data_no_rna$`FSC-A`, fig1b_data_no_rna$`SSC-A`), 2), sep = "")
# Plot:
fig1b_plot <- ggplot(data = fig1b_data_no_rna, aes(x = `log2_FSC`, y = `log2_SSC`)) +
geom_point(size = 3, alpha = .7, shape = 21) +
annotate(geom = 'text', label = fig1b_pears_no_rna, x = min(fig1b_data_no_rna$log2_FSC), y = max(fig1b_data_no_rna$log2_SSC), hjust = 0, vjust = 1, size = 6) +
stat_smooth(col = "indianred3", alpha = .3)  +
labs(y = "Condensate granularity\nlog2(SSC)", x = "Condensate size\nlog2(FSC)")
plot(fig1b_plot)
ggsave(fig1b_plot, file="./fig1b.pdf",width = 6, height = 6, device = "pdf")
# Chunk 6
# Prepare dataframe:
fig1c_data <- master %>%
filter(experiment == "ool17" | experiment == "ool18") %>%
drop_na() %>%
filter(tpm != 0) %>%
group_by(experiment, cell_id) %>%
summarise(n = n(), FSC = FSC[1], SSC = SSC[1], p_pseudoaligned[1], experiment[1], log2_FSC = log2(FSC[1])) %>%
filter(n < 7000)
# Calc correlation
fig1c_m <- lm(n ~ log2_FSC, fig1c_data)
fig1c_r2 <- as.character(paste("R^2 =", round(summary(fig1c_m)$r.squared, 3), sep = " "))
fig1c_pears <- paste("r = ", round(cor(fig1c_data$log2_FSC, fig1c_data$n), 2), sep = "")
# Plot:
fig1c_plot <- ggplot(data = fig1c_data, aes(x = log2_FSC, y = n)) +
geom_point(size = 4, alpha = .7, shape = 21) +
stat_smooth(method = "lm", col = "indianred2")  +
#scale_x_continuous(trans = "log10") +
annotate(geom = 'text', label = fig1c_pears, x = min(fig1c_data$log2_FSC), y = max(fig1c_data$n), hjust = -.1, vjust = 1, size = 6) +
#xlim(c(0,3e5)) +
labs(x = "Condensate size\nlog2(FSC)", y = "Number of\ndetected transcripts")
plot(fig1c_plot)
ggsave(fig1c_plot, file="./fig1c.pdf",width = 6, height = 6, device = "pdf")
# Chunk 7
# 1.) Export transcript ids
pdda_target_ids <- master %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
filter(experiment == "ool18" | experiment == "ool17" ) %>%
filter(tpm != 0) %>%
dplyr::select(target_id) %>%
distinct()
# Number of distinct transcripts:
pdda_target_ids %>% nrow()
# Export as input for base_content.py
# write.table(pdda_target_ids, file = "./pdda_target_ids.txt")
# 2.) Get sequences of each transcript and calculate gc content using custom python script:
#     base_content.py
# 3.) Import GC content information
pdda_base_content <- read.csv(file = "./pdda_resids_filter_seqs_bases.csv")
pdda_incl_bc <- master %>%
left_join(., pdda_base_content, by = "target_id")
# format dataframe for PCA
pdda <- pdda_incl_bc %>%
mutate(new_cell_id = paste(cell_id, experiment, sep = "_")) %>%
filter(experiment == "ool17" | experiment == "ool18") %>%
filter(tpm != 0) %>%
group_by(new_cell_id) %>%
summarise(mean_length = mean(length),
mean_gc = mean(rel_GC),
FSC = FSC[1], SSC = SSC[1],
num_trans = n()) %>%
filter(FSC != is.na(FSC))
# Convert df into matrix; format and scale
pdda2 <- as.matrix(pdda)
row.names(pdda2) <- pdda2[,1]
pdda2 <- pdda2[,c(2:length(colnames(pdda2)))]
class(pdda2)<-"numeric"
scale_pdda2 <- scale(pdda2)
# run pca: input for prcomp needs to be a cell (rows) x gene (cols) matrix
res.pca <- prcomp(scale_pdda2)
# format pca object for plotting
df_out <- as.data.frame(res.pca$x)
var <- get_pca_var(res.pca)
var_df <- as.data.frame(var$coord) %>% dplyr::rename(PC1 = Dim.1, PC2 = Dim.2, PC3 = Dim.3, PC4 = Dim.4, PC5 = Dim.5)
var_df.1 <- as.data.frame(var$coord) %>% dplyr::rename(PC1 = Dim.1, PC2 = Dim.2, PC3 = Dim.3, PC4 = Dim.4, PC5 = Dim.5)
rownames(var_df.1) <- c("Ave transcript length","GC content","FSC", "SSC", "Num of transcripts")
# df for PC labels
var_df.2 <- var_df.1[,c(1:2)]
var_df.2[,1] <- c(-0.5,-1,-5,-5,-4.5)
var_df.2[,2] <- c(-3,3,-1.2,-2,.7)
# plot PCA including variable arrows
fig1d_plot <- ggplot(data= df_out, aes(x = PC1, y = PC2)) +
geom_point(size = 4, alpha = .7, shape = 21) +
geom_segment(x = 0, xend = 0, y = -7.5, yend = 8, linetype=3) +
geom_segment(x = -12.5, xend = 5, y = 0, yend = 0, linetype=3) +
# scale arrows x3 for visiblity
geom_segment(data= var_df*3, aes(x= 0, y=0, xend = PC1*1, yend= PC2*1), size = 1.5, alpha = 1, color = "indianred2", arrow = arrow(length = unit(0.1, "inches"))) +
geom_label(data = var_df.2*1.5, aes(label = rownames(var_df.1), fontface=1), color = "black", size = 6, alpha = .5) +
scale_x_continuous(limits=c(-12,+5), expand = c(0, 0)) +
scale_y_continuous(limits=c(-7.5,8), expand = c(0, 0)) +
labs(x = "PC1 (68.9%)", y = "PC2 (20.6%)", title = "")
plot(fig1d_plot)
rownames(var_df.1) <- c("Ave transcript length","GC content","FSC", "SSC", "Num of\ntranscripts")
# df for PC labels
var_df.2 <- var_df.1[,c(1:2)]
var_df.2[,1] <- c(-0.5,-1,-5,-5,-4.5)
var_df.2[,2] <- c(-3,3,-1.2,-2,.7)
# plot PCA including variable arrows
fig1d_plot <- ggplot(data= df_out, aes(x = PC1, y = PC2)) +
geom_point(size = 4, alpha = .7, shape = 21) +
geom_segment(x = 0, xend = 0, y = -7.5, yend = 8, linetype=3) +
geom_segment(x = -12.5, xend = 5, y = 0, yend = 0, linetype=3) +
# scale arrows x3 for visiblity
geom_segment(data= var_df*3, aes(x= 0, y=0, xend = PC1*1, yend= PC2*1), size = 1.5, alpha = 1, color = "indianred2", arrow = arrow(length = unit(0.1, "inches"))) +
geom_label(data = var_df.2*1.5, aes(label = rownames(var_df.1), fontface=1), color = "black", size = 6, alpha = .5) +
scale_x_continuous(limits=c(-12,+5), expand = c(0, 0)) +
scale_y_continuous(limits=c(-7.5,8), expand = c(0, 0)) +
labs(x = "PC1 (68.9%)", y = "PC2 (20.6%)", title = "")
plot(fig1d_plot)
var_df.2
var_df.2[,1] <- c(-0.5,-1,-5,-5,-5.5)
var_df.2[,2] <- c(-3,3,-1.2,-2,.7)
# plot PCA including variable arrows
fig1d_plot <- ggplot(data= df_out, aes(x = PC1, y = PC2)) +
geom_point(size = 4, alpha = .7, shape = 21) +
geom_segment(x = 0, xend = 0, y = -7.5, yend = 8, linetype=3) +
geom_segment(x = -12.5, xend = 5, y = 0, yend = 0, linetype=3) +
# scale arrows x3 for visiblity
geom_segment(data= var_df*3, aes(x= 0, y=0, xend = PC1*1, yend= PC2*1), size = 1.5, alpha = 1, color = "indianred2", arrow = arrow(length = unit(0.1, "inches"))) +
geom_label(data = var_df.2*1.5, aes(label = rownames(var_df.1), fontface=1), color = "black", size = 6, alpha = .5) +
scale_x_continuous(limits=c(-12,+5), expand = c(0, 0)) +
scale_y_continuous(limits=c(-7.5,8), expand = c(0, 0)) +
labs(x = "PC1 (68.9%)", y = "PC2 (20.6%)", title = "")
plot(fig1d_plot)
# plot PCA including variable arrows
fig1d_plot <- ggplot(data= df_out, aes(x = PC1, y = PC2)) +
geom_point(size = 4, alpha = .7, shape = 21) +
geom_segment(x = 0, xend = 0, y = -7.5, yend = 8, linetype=3) +
geom_segment(x = -12.5, xend = 5, y = 0, yend = 0, linetype=3) +
# scale arrows x3 for visiblity
geom_segment(data= var_df*4, aes(x= 0, y=0, xend = PC1*1, yend= PC2*1), size = 1.5, alpha = 1, color = "indianred2", arrow = arrow(length = unit(0.1, "inches"))) +
geom_label(data = var_df.2*1.5, aes(label = rownames(var_df.1), fontface=1), color = "black", size = 6, alpha = .5) +
scale_x_continuous(limits=c(-12,+5), expand = c(0, 0)) +
scale_y_continuous(limits=c(-7.5,8), expand = c(0, 0)) +
labs(x = "PC1 (68.9%)", y = "PC2 (20.6%)", title = "")
plot(fig1d_plot)
# plot PCA including variable arrows
fig1d_plot <- ggplot(data= df_out, aes(x = PC1, y = PC2)) +
geom_point(size = 4, alpha = .7, shape = 21) +
geom_segment(x = 0, xend = 0, y = -7.5, yend = 8, linetype=3) +
geom_segment(x = -12.5, xend = 5, y = 0, yend = 0, linetype=3) +
# scale arrows x3 for visiblity
geom_segment(data= var_df*5, aes(x= 0, y=0, xend = PC1*1, yend= PC2*1), size = 1.5, alpha = 1, color = "indianred2", arrow = arrow(length = unit(0.1, "inches"))) +
geom_label(data = var_df.2*1.5, aes(label = rownames(var_df.1), fontface=1), color = "black", size = 6, alpha = .5) +
scale_x_continuous(limits=c(-12,+5), expand = c(0, 0)) +
scale_y_continuous(limits=c(-7.5,8), expand = c(0, 0)) +
labs(x = "PC1 (68.9%)", y = "PC2 (20.6%)", title = "")
plot(fig1d_plot)
var_df.2
var_df.2[,2] <- c(-3.5,3,-1.2,-2,.7)
# plot PCA including variable arrows
fig1d_plot <- ggplot(data= df_out, aes(x = PC1, y = PC2)) +
geom_point(size = 4, alpha = .7, shape = 21) +
geom_segment(x = 0, xend = 0, y = -7.5, yend = 8, linetype=3) +
geom_segment(x = -12.5, xend = 5, y = 0, yend = 0, linetype=3) +
# scale arrows x3 for visiblity
geom_segment(data= var_df*5, aes(x= 0, y=0, xend = PC1*1, yend= PC2*1), size = 1.5, alpha = 1, color = "indianred2", arrow = arrow(length = unit(0.1, "inches"))) +
geom_label(data = var_df.2*1.5, aes(label = rownames(var_df.1), fontface=1), color = "black", size = 6, alpha = .5) +
scale_x_continuous(limits=c(-12,+5), expand = c(0, 0)) +
scale_y_continuous(limits=c(-7.5,8), expand = c(0, 0)) +
labs(x = "PC1 (68.9%)", y = "PC2 (20.6%)", title = "")
plot(fig1d_plot)
getwd()
ggsave(fig1d_plot, file="./fig1d.pdf",width = 6, height = 6, device = "pdf")
var_df.2[,2] <- c(-3.5,3.5,-1.2,-2,.7)
# plot PCA including variable arrows
fig1d_plot <- ggplot(data= df_out, aes(x = PC1, y = PC2)) +
geom_point(size = 4, alpha = .7, shape = 21) +
geom_segment(x = 0, xend = 0, y = -7.5, yend = 8, linetype=3) +
geom_segment(x = -12.5, xend = 5, y = 0, yend = 0, linetype=3) +
# scale arrows x3 for visiblity
geom_segment(data= var_df*5, aes(x= 0, y=0, xend = PC1*1, yend= PC2*1), size = 1.5, alpha = 1, color = "indianred2", arrow = arrow(length = unit(0.1, "inches"))) +
geom_label(data = var_df.2*1.5, aes(label = rownames(var_df.1), fontface=1), color = "black", size = 6, alpha = .5) +
scale_x_continuous(limits=c(-12,+5), expand = c(0, 0)) +
scale_y_continuous(limits=c(-7.5,8), expand = c(0, 0)) +
labs(x = "PC1 (68.9%)", y = "PC2 (20.6%)", title = "")
plot(fig1d_plot)
ggsave(fig1d_plot, file="./fig1d.pdf",width = 6, height = 6, device = "pdf")
var_df.2
var_df.2[,1] <- c(-0.5,-1,-5,-5,-4.5)
var_df.2[,2] <- c(-3.5,3.5,-1.2,-2,.7)
# plot PCA including variable arrows
fig1d_plot <- ggplot(data= df_out, aes(x = PC1, y = PC2)) +
geom_point(size = 4, alpha = .7, shape = 21) +
geom_segment(x = 0, xend = 0, y = -7.5, yend = 8, linetype=3) +
geom_segment(x = -12.5, xend = 5, y = 0, yend = 0, linetype=3) +
# scale arrows x3 for visiblity
geom_segment(data= var_df*5, aes(x= 0, y=0, xend = PC1*1, yend= PC2*1), size = 1.5, alpha = 1, color = "indianred2", arrow = arrow(length = unit(0.1, "inches"))) +
geom_label(data = var_df.2*1.5, aes(label = rownames(var_df.1), fontface=1), color = "black", size = 6, alpha = .5) +
scale_x_continuous(limits=c(-12,+5), expand = c(0, 0)) +
scale_y_continuous(limits=c(-7.5,8), expand = c(0, 0)) +
labs(x = "PC1 (68.9%)", y = "PC2 (20.6%)", title = "")
plot(fig1d_plot)
ggsave(fig1d_plot, file="./fig1d.pdf",width = 6, height = 6, device = "pdf")
